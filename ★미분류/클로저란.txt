
## 클로저

### 클로저란?[1] [2][3]

[1] “자신이 선언될 당시의 환경을 기억하는 함수”

[2] 클로저는 함수와 그 함수가 선언된 렉시컬 환경과의 조합을 말한다. 이 렉시컬 환경은 클로저가 생성될 때의 환경으로, 외부 변수에 대한 정보를 담고 있다.

[3] 클로저란 내부 함수가 외부로 반환된 이후에도 life-cycle 이 유지되는 것을 말한다. 클로저 안에 정의된 함수는 만들어진 환경을 기억한다.


클로저는 내부 함수가 외부 함수의 변수에 접근할 수 있도록 해주며, 외부 함수가 실행이 끝난 후에도 외부 함수의 변수를 참조할 수 있다. 이러한 특성 덕분에 클로저는 데이터 은닉, 정보 보호, 메모리 제한 등의 기능을 수행하는 데 사용될 수 있다.

- 예제 ①
```
function outer() {
    let count = 0;
    return function inner() {
        count += 1;
        return count;
    }
}

const counter = outer();
console.log(counter()); // 1
console.log(counter()); // 2
```
-> outer 함수는 inner 함수를 반환한다. inner 함수는 outer 함수의 count 변수를 참조하고 있다. outer 함수의 실행이 끝나도 inner 함수는 count 변수를 계속 참조할 수 있으며, 이를 통해 count 변수의 상태를 계속 유지할 수 있습니다. 이처럼 내부 함수가 외부 함수의 변수를 참조하고 그 상태를 유지하는 구조가 바로 클로저이다.

- 예제 ②[4]
```
function outer(){
	const outerVal = "외부 변수";

	function inner() {
		console.log(outerVal);
	}
	
	return inner;
}
const innerExecute = outer();
innerExecute(); // "외부 변수"
```
-> outer는 inner를 return 했다.innerExecute에는 outer에서 반환한 inner함수가 할당되게 된다. innerExecute를 호출할 때마다, outer에서 정의한 outerVal을 출력하게 되며, 이때 inner 함수는 outer 함수의 스코프 체인을 유지하게 되는데, 이러한 특성을 이용하여 클로저를 구현한 것이다.
 

### 출처
[1] https://hanamon.kr/javascript-%ED%81%B4%EB%A1%9C%EC%A0%80/ <br>
[2] GPT 4.0 <br>
[3] https://simplejs.gitbook.io/olaf/11.-closure <br>
[4] https://zero-base.co.kr/event/media_insight_contents_FE_frontend_tech_Interview
